import 'dart:async';

import 'package:flutter/material.dart';
import 'package:mira/core/event/event_args.dart';
import 'package:mira/core/event/event_debounce.dart';
import 'package:mira/core/event/event_manager.dart';
import 'package:mira/core/plugin_manager.dart';
import 'package:mira/dock/dock_controller.dart';
import 'package:mira/dock/dock_manager.dart';
import 'package:mira/plugins/libraries/libraries_plugin.dart';
import 'package:mira/plugins/libraries/widgets/app_sidebar_view.dart';
import 'package:mira/plugins/libraries/widgets/library_list_view.dart';
import 'package:mira/plugins/libraries/widgets/library_dock_item.dart';
import 'package:mira/views/library_tabs_empty_view.dart';
import '../models/library.dart';
import 'package:mira/core/widgets/hotkey_settings_view.dart';

class LibraryTabsView extends StatefulWidget {
  const LibraryTabsView({super.key});

  @override
  // ignore: library_private_types_in_public_api
  _LibraryTabsViewState createState() => _LibraryTabsViewState();
}

class _LibraryTabsViewState extends State<LibraryTabsView> {
  late LibrariesPlugin _plugin;
  late LibraryTabManager _tabManager;
  late final ValueNotifier<List<LibraryTabData>> _tabDatas = ValueNotifier([]);
  final List<StreamSubscription> _subscriptions = [];
  late DockController _dockController;

  @override
  void initState() {
    super.initState();
    _plugin = PluginManager.instance.getPlugin('libraries') as LibrariesPlugin;
    _tabManager = _plugin.tabManager;

    // 初始化dock controller
    _dockController = DockController();
    _dockController.addListener(_onDockControllerChanged);
    _dockController.initializeDockSystem();

    _loadTabDatas();
    init();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _tabManager.restoreActiveTab();
    });
  }

  void _onDockControllerChanged() {
    setState(() {
      // dock控制器状态变化时更新UI
    });
  }

  Future<void> init() async {
    final chanedStream = EventDebouncer(
      duration: Duration(seconds: 1),
    ); // 广播更新节流
    _subscriptions.addAll([
      _tabManager.onTabEventStream.stream.listen((detail) async {
        final event = detail['event'];
        final tabId = detail['tabId'];
        print('tab event: $event, tabId: $tabId');
        switch (event) {
          case 'goto':
            break;
          case 'active':
            // 保证tab所属的library进行初始化连接
            _tabManager.tryUpdate(tabId);
            break;
          case 'close':
          case 'add':
          case 'clear':
            _loadTabDatas();
            break;
        }
      }),
      chanedStream.stream.listen((EventArgs args) {
        //  服务器广播文件更新
        if (args is MapEventArgs) {
          final libraryId = args.item['libraryId'];
          final currentTab = _tabManager.getCurrentTabId();
          for (LibraryTabData tabData in _tabManager.tabDatas) {
            final library = tabData.library;
            if (library.id == libraryId) {
              _tabManager.setValue(tabData.id, 'needUpdate', true);
              if (tabData.id == currentTab) {
                _tabManager.tryUpdate(tabData.id);
              }
            }
          }
        }
      }),
    ]);
    EventManager.instance.subscribe(
      'file::changed',
      (args) => chanedStream.onCall(args),
    );
    EventManager.instance.subscribe(
      'tags::updated',
      (args) => chanedStream.onCall(args),
    );
    EventManager.instance.subscribe(
      'folder::updated',
      (args) => chanedStream.onCall(args),
    );
  }

  void _loadTabDatas() {
    _tabDatas.value = List<LibraryTabData>.from(_tabManager.tabDatas);
    if (_tabDatas.value.length == 1) {
      // bug：初次打开不显示...
      setState(() {});
    }
    // 同步dock items
    _syncTabsWithDock();
  }

  /// 同步library tabs到dock系统
  void _syncTabsWithDock() {
    // 获取dock系统中的主要tab
    final dockTabs = _dockController.dockTabs;
    final mainTab = dockTabs.getDockTab('home');

    if (mainTab == null) {
      // 如果主tab不存在，创建一个
      DockManager.createDockTab(
        'main',
        'home',
        displayName: 'Libraries',
        closable: false,
        maximizable: false,
        buttons: [],
      );
    }

    // 清理现有的library dock items
    // 注意：这里需要实现清理逻辑，暂时跳过

    // 为每个library tab创建dock item
    for (final tabData in _tabDatas.value) {
      final dockItem = DockItem(
        type: 'library_tab',
        title: tabData.title.isNotEmpty ? tabData.title : tabData.library.name,
        builder:
            (item) => DockingItem(
              id: 'library_${tabData.id}',
              name: item.title,
              closable: true,
              widget: LibraryContentView(plugin: _plugin, tabData: tabData),
            ),
      );

      // 添加到主tab中
      DockManager.addDockItem('main', 'home', dockItem);
    }
  }

  @override
  void dispose() {
    super.dispose();
    for (final subscription in _subscriptions) {
      subscription.cancel();
    }
    _dockController.removeListener(_onDockControllerChanged);
    _dockController.dispose();
    _tabManager.dispose();
    _plugin.server?.stop();
  }

  final ValueNotifier<bool> _showSidebar = ValueNotifier(false);

  Future<void> _openLibrary() async {
    final libraries = _plugin.dataController.libraries;
    final itemCount = libraries.length;
    if (itemCount == 1) {
      _tabManager.addTab(libraries.first);
      return;
    }
    final selectedLibrary = await showDialog<Library>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Select Library'),
            content: SizedBox(
              width: double.maxFinite,
              child: LibraryListView(
                onSelected: (library) {
                  Navigator.pop(context, library);
                },
              ),
            ),
          ),
    );
    if (selectedLibrary != null) {
      _tabManager.addTab(selectedLibrary);
    }
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<bool>(
      future: _tabManager.isLoaded, // 等待tabManager加载完毕
      builder: (context, snapshot) {
        switch (snapshot.connectionState) {
          case ConnectionState.none:
          case ConnectionState.waiting:
            return CircularProgressIndicator();
          case ConnectionState.active:
          case ConnectionState.done:
            if (snapshot.hasError) {
              return Text('加载数据出错: ${snapshot.error}');
            }

            return Scaffold(
              appBar: AppBar(
                leading: IconButton(
                  icon: const Icon(Icons.menu),
                  onPressed: () => _showSidebar.value = !_showSidebar.value,
                ),
                actions: [
                  IconButton(
                    icon: const Icon(Icons.keyboard),
                    tooltip: 'Shortcut Settings',
                    onPressed: () {
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (context) => const HotKeySettingsView(),
                        ),
                      );
                    },
                  ),
                  IconButton(
                    icon: const Icon(Icons.settings),
                    onPressed: () => Navigator.pushNamed(context, '/settings'),
                  ),
                  IconButton(
                    icon: const Icon(Icons.add),
                    tooltip: 'Add Library Tab',
                    onPressed: () => _openLibrary(),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close),
                    tooltip: 'Close All Tabs',
                    onPressed: () => _tabManager.closeAllTabs(),
                  ),
                ],
                title: const Text('素材管理器'),
                backgroundColor: Theme.of(context).colorScheme.surface,
              ),
              body: Row(
                children: [
                  ValueListenableBuilder<bool>(
                    valueListenable: _showSidebar,
                    builder: (context, showSidebar, child) {
                      return showSidebar
                          ? Row(
                            children: [
                              AppSidebarView(),
                              const VerticalDivider(width: 1),
                            ],
                          )
                          : const SizedBox.shrink();
                    },
                  ),
                  Expanded(
                    child: ValueListenableBuilder<List<LibraryTabData>>(
                      valueListenable: _tabDatas,
                      builder: (context, tabDatas, child) {
                        if (tabDatas.isEmpty) {
                          return LibraryTabsEmptyView(
                            onAddTab: () => _openLibrary(),
                          );
                        }

                        // 使用dock系统显示tabs
                        return _dockController.dockTabs.buildDockingWidget(
                          context,
                        );
                      },
                    ),
                  ),
                ],
              ),
            );
        }
      },
    );
  }
}
